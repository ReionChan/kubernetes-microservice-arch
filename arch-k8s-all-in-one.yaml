apiVersion: v1
kind: Namespace
metadata:
  name: arch-namespace
spec: {}

---

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: arch-admin-role
  namespace: arch-namespace
rules:
  - apiGroups: [""]
    resources: ["endpoints", "services", "configmaps", "pods", "secrets"]
    verbs: ["get", "list", "watch"]

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: arch-admin
  namespace: arch-namespace

---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: arch-admin-binding
  namespace: arch-namespace
subjects:
  - kind: ServiceAccount
    apiGroup: ""
    name: arch-admin
    namespace: arch-namespace
  - kind: ServiceAccount
    apiGroup: ""
    name: default
    namespace: arch-namespace
roleRef:
  kind: Role
  apiGroup: ""
  name: arch-admin-role

---

apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: arch-namespace
  name: arch-jaeger-deployment
  labels:
    app: arch-jaeger-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: arch-jaeger
  strategy: {}
  template:
    metadata:
      labels:
        app: arch-jaeger
    spec:
      serviceAccountName: arch-admin
      containers:
        - image: jaegertracing/all-in-one:1.51.0
          name: jaeger-all-in-one
          env:
            - name: spring.cloud.kubernetes.discovery.primary-port-name
              value: otlp-http
          ports:
            - containerPort: 4318
              name: otlp-http
            - containerPort: 4317
              name: otlp-grpc
            - containerPort: 16686
              name: frontend

---

apiVersion: v1
kind: Service
metadata:
  name: arch-jaeger
  namespace: arch-namespace
  labels:
    app: arch-jaeger
    primary-port-name: otlp-http
spec:
  ports:
    - port: 4317
      name: otlp-grpc
      targetPort: 4317
    - port: 4318
      name: otlp-http
      targetPort: 4318
    - port: 16686
      name: frontend
      targetPort: 16686
      nodePort: 30001
  selector:
    app: arch-jaeger
  type: NodePort
  sessionAffinity: None

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: arch-otel-col-configmap
  namespace: arch-namespace
  labels:
    spring.cloud.kubernetes.config: "true"
  annotations:
    spring.cloud.kubernetes.configmap.apps: "arch-otel-col"
data:
  collector-config.yaml: |
    receivers:
      otlp:
        protocols:
          http:
    processors:
      batch:
    exporters:
      logging:
        # basic | normal | detailed
        verbosity: basic
      otlp/jaeger:
        endpoint: "http://arch-jaeger:4317"
        tls:
          insecure: true
    service:
      pipelines:
        metrics:
          receivers: [otlp]
          processors: [batch]
          exporters: [logging]
        traces:
          receivers: [otlp]
          processors: [batch]
          exporters: [otlp/jaeger]
          #exporters: [logging, otlp/jaeger]
        logs:
          receivers: [otlp]
          processors: [batch]
          exporters: [logging]

---

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: arch-otel-col-deployment
  name: arch-otel-col-deployment
  namespace: arch-namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: arch-otel-col
  strategy: {}
  template:
    metadata:
      labels:
        app: arch-otel-col
    spec:
      serviceAccountName: arch-admin
      containers:
        - image: otel/opentelemetry-collector-contrib:0.101.0
          name: otel-collector
          command:
            - "/otelcol-contrib"
            - "--config=/conf/otel-collector-config.yaml"
          ports:
            - containerPort: 4318
              name: otlp-http
          volumeMounts:
            - name: otel-collector-config-vol
              mountPath: /conf
          env:
            - name: spring.cloud.kubernetes.discovery.primary-port-name
              value: otlp-http
      volumes:
        - name: otel-collector-config-vol
          configMap:
            name: arch-otel-col-configmap
            items:
              - key: collector-config.yaml
                path: otel-collector-config.yaml

---

apiVersion: v1
kind: Service
metadata:
  name: arch-otel-col
  namespace: arch-namespace
  labels:
    app: arch-otel-col
    primary-port-name: otlp-http
spec:
  ports:
    - port: 4318
      name: otlp-http
      targetPort: 4318
    - port: 4317
      name: otlp-grpc
      targetPort: 4317
  selector:
    app: arch-otel-col
  type: ClusterIP
  sessionAffinity: None

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: arch-config-watcher-deployment
  namespace: arch-namespace
spec:
  selector:
    matchLabels:
      app: arch-config-watcher
  template:
    metadata:
      labels:
        app: arch-config-watcher
    spec:
      serviceAccountName: arch-admin
      containers:
        - name: arch-config-watcher
          image: springcloud/spring-cloud-kubernetes-configuration-watcher:3.1.1
          imagePullPolicy: IfNotPresent
          readinessProbe:
            httpGet:
              port: 8888
              path: /actuator/health/readiness
            initialDelaySeconds: 60
            timeoutSeconds: 30
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 3
          livenessProbe:
            httpGet:
              port: 8888
              path: /actuator/health/liveness
            initialDelaySeconds: 90
            timeoutSeconds: 30
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 3
          ports:
            - containerPort: 8888
          env:
            - name: LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_CLOUD_KUBERNETES_CONFIGURATION_WATCHER
              value: DEBUG
            - name: LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_CLOUD_KUBERNETES_CLIENT_CONFIG_RELOAD
              value: DEBUG
            - name: LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_CLOUD_KUBERNETES_COMMONS_CONFIG_RELOAD
              value: DEBUG
            - name: SPRING_CLOUD_KUBERNETES_RELOAD_NAMESPACES_0
              value: "arch-namespace"
            - name: SPRING_CLOUD_KUBERNETES_CONFIGURATION_WATCHER_REFRESHDELAY
              value: "10000"
            - name: spring.cloud.kubernetes.discovery.primary-port-name
              value: http
            - name: user.timezone
              value: "GMT+08"
            - name: file.encoding
              value: "UTF-8"
---

apiVersion: v1
kind: Service
metadata:
  name: arch-config-watcher
  namespace: arch-namespace
  labels:
    app: arch-config-watcher
    primary-port-name: http
spec:
  ports:
    - name: http
      port: 8888
      targetPort: 8888
  selector:
    app: arch-config-watcher
  type: ClusterIP

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: arch-app-common-env-configmap
  namespace: arch-namespace
  labels:
    spring.cloud.kubernetes.config: "true"
  annotations:
    spring.cloud.kubernetes.configmap.apps: "arch-gateway, arch-iam, arch-users, arch-app"
data:
  spring.output.ansi.enabled: "always"
  PROFILES: "dev"
  JAVA_OPTS: "-Duser.timezone=GMT+08 -Dfile.encoding=UTF-8 -javaagent:/opentelemetry-javaagent.jar"
  #  JAVA_OPTS: "-Duser.timezone=GMT+08 -Dfile.encoding=UTF-8"
  ISSUE_ADDR: "http://arch-gateway:9000/arch-iam"
  OTEL_EXPORTER_OTLP_ENDPOINT: "http://arch-otel-col:4318"
  OTEL_LOGS_EXPORTER: "otlp"
  OTEL_CONFIG_FILE: ""
  management.otlp.metrics.export.enabled: "true"
  management.tracing.enabled: "true"

---

apiVersion: v1
kind: Secret
metadata:
  name: arch-gateway
  namespace: arch-namespace
  labels:
    spring.cloud.kubernetes.secret: "true"
  annotations:
    spring.cloud.kubernetes.configmap.apps: "arch-gateway"

data:
  OAUTH2_CLIENT_SECRET: c2VjcmV0Z2F0ZXdheQ==

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: arch-gateway
  namespace: arch-namespace
  labels:
    spring.cloud.kubernetes.config: "true"
  annotations:
    spring.cloud.kubernetes.configmap.apps: "arch-gateway"
data:
  arch-gateway-kubernetes.yml: |-
    server:
      port: 9000
      shutdown: graceful
      #  http2:
      #    enabled: true
      #  jetty:
      #    threads:
      #      max: 200
      #      min: 4
      #      acceptors: 1
      #      selectors: 1
      #    max-connections: 400
    
    spring:
      task:
        scheduling:
          thread-name-prefix: "arch-scheduling-"
          pool:
            size: 3
      # Security 默认用户设置
      security:
        oauth2:
          client:
            registration:
              ArchIAM:
                provider: ArchIAM
                client-id: ${spring.application.name}
                client-name: ${spring.application.name}
                authorization-grant-type: client_credentials
                client-authentication-method: client_secret_basic
                scope: [ SERVICE ]
            provider:
              ArchIAM:
                authorizationUri: ${ISSUE_ADDR:http://localhost:9090}/oauth2/authorize
                token-uri: ${ISSUE_ADDR:http://localhost:9090}/oauth2/token
                jwk-set-uri: ${ISSUE_ADDR:http://localhost:9090}/oauth2/jwks
                user-info-uri: ${ISSUE_ADDR:http://localhost:9090}/userinfo
      cloud:
        # k8s 配置
        kubernetes:
          discovery:
            namespaces:
              - arch-namespace
            catalogServicesWatchDelay: 5000
            primary-port-name: http
        gateway:
          globalcors:
            corsConfigurations:
              '[/**]':
                # 允许跨域访问
                allowedOrigins: "*"
                # 允许跨域访问的请求方法
                allowedMethods: "GET,POST,PUT,PATCH,DELETE,OPTIONS,HEAD"
                # 允许跨域访问的请求头
                allowedHeaders: "*"
                # 允许跨域访问的响应头
                exposedHeaders: "*"
                # 允许跨域访问的请求凭证
                # 发生跨域时是否允许浏览器携带用户状态信息，例如：cookies、http认证信息等
                allowCredentials: false
                maxAge: 1800
          discovery:
            locator:
              # 开启网关与服务发现集成
              enabled: true
          # 路由规则
          routes:
            # 将以 /v3/api-docs/serviceId 路径，路由到 /serviceId/v3/api-docs
            - id: springdoc-route
              uri: http://localhost:${server.port}
              predicates:
                - Path=/v3/api-docs/**
              filters:
                - RewritePath=/v3/api-docs/(?<path>.*), /$\{path}/v3/api-docs
    
    # === SpringDoc ===
    springdoc:
      version: "@project.version@"
      # api 文档设置
      api-docs:
        version: openapi_3_1
        # 文档路径，默认 /v3/api-docs
        path: /v3/api-docs
      # swagger 文档设置
      swagger-ui:
        # 文档路径，默认 /swagger-ui.html
        path: /swagger-ui.html
        # 设置不同服务的文档显示名称及链接地址
        urls:
          # users 服务文档地址
          - name: arch-users
            url: /v3/api-docs/arch-users
          # products 服务文档地址
          - name: arch-app
            url: /v3/api-docs/arch-app
          # orders 服务文档地址
          - name: arch-iam
            url: /v3/api-docs/arch-iam
        # 设置接口方法按字母排序
        operations-sorter: alpha
        # 设置接口标签按字母排序
        tags-sorter: alpha
    
    # 日志配置
    logging:
      pattern:
        console: "%clr(%d{HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(-){faint} %clr([%t]){faint} %clr(%-40logger{39}){cyan}[%line]%clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:%wEx}"
      level:
        org.springframework.cloud: info
    
    # 展示指标端点
    management:
      endpoints:
        web:
          exposure:
            include: health, refresh, circuitbreakers
      endpoint:
        health:
          probes:
            enabled: true
        refresh:
          enabled: true
      health:
        livenessstate:
          enabled: true
        readinessstate:
          enabled: true

  arch-gateway-dev.yml: |-
    logging:
      pattern:
        console: "%clr(%d{HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(-){faint} %clr([%t]){faint} %clr(%-40logger{39}){cyan}[%line]%clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:%wEx}"
      level:
        org.springframework.cloud: info
        io.github.reionchan.rpc.feign: debug

---

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: arch-gateway-deployment
  name: arch-gateway-deployment
  namespace: arch-namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: arch-gateway
  strategy: {}
  template:
    metadata:
      labels:
        app: arch-gateway
    spec:
      serviceAccountName: arch-admin
      containers:
        - image: docker.io/reion78/arch-gateway:1.0_k8s
          name: arch-gateway
          ports:
            - containerPort: 9000
              name: http
          readinessProbe:
            httpGet:
              port: 9000
              path: /actuator/health/readiness
            initialDelaySeconds: 60
            timeoutSeconds: 30
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 3
          livenessProbe:
            httpGet:
              port: 9000
              path: /actuator/health/liveness
            initialDelaySeconds: 90
            timeoutSeconds: 30
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 3
          # 优雅停机
          lifecycle:
            preStop:
              exec:
                command: [ "sh", "-c", "sleep 10" ]
          env:
            - name: OTEL_SERVICE_NAME
              value: arch-gateway
            - name: spring.security.oauth2.client.registration.ArchIAM.client-secret
              valueFrom:
                secretKeyRef:
                  name: arch-gateway
                  key: OAUTH2_CLIENT_SECRET
          envFrom:
            - configMapRef:
                name: arch-app-common-env-configmap

---

apiVersion: v1
kind: Service
metadata:
  name: arch-gateway
  namespace: arch-namespace
  labels:
    app: arch-gateway
    primary-port-name: http
spec:
  ports:
    - port: 9000
      name: http
      targetPort: 9000
      nodePort: 30000
  selector:
    app: arch-gateway
  type: NodePort
  sessionAffinity: None

---

apiVersion: v1
kind: Secret
metadata:
  name: arch-iam
  namespace: arch-namespace
  labels:
    spring.cloud.kubernetes.secret: "true"
  annotations:
    spring.cloud.kubernetes.configmap.apps: "arch-iam"
data:
  OAUTH2_CLIENT_SECRET: c2VjcmV0aWFt

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: arch-iam
  namespace: arch-namespace
  labels:
    spring.cloud.kubernetes.config: "true"
  annotations:
    spring.cloud.kubernetes.configmap.apps: "arch-iam"
data:
  arch-iam-kubernetes.yml: |-
    server:
      port: 9090
      shutdown: graceful
    spring:
      jackson:
        # 日期格式
        date-format: yyyy-MM-dd HH:mm:ss
        # 时区
        time-zone: GMT+8
        # 忽略 null 的属性值
        default-property-inclusion: NON_NULL
      # 缓存配置
      cache:
        # 启用自动化装配的 caffeine 本地缓存
        type: caffeine
        caffeine:
          # 默认容量为 128 最大 10000 且缓存过期时间 30s 的本地缓存
          spec: initialCapacity=128,maximumSize=10000,expireAfterWrite=30s
      # 调度器线程池
      task:
        scheduling:
          thread-name-prefix: "arch-scheduling-"
          pool:
            size: 3
      # Security 默认用户设置
      security:
        oauth2:
          authorizationserver:
            issuer: ${ISSUE_ADDR:http://localhost:9000/arch-iam}
            # OAuth2 客户端注册信息，生产环境可切换成基于数据库的配置模式
            client:
              # 本方网页端用户使用 Web 端登录时，由于是自身系统，使用已被 OAuth2.1 弃用的密码模式（例如：Vue）
              # 网页客户端，代替用户提交密码进行认证（1. 网页客户端自身认证 2.认证后再进行用户密码模式认证 3.获得用户的访问令牌、刷新令牌）
              arch-web:
                token:
                  refresh-token-time-to-live: P1D
                registration:
                  client-id: arch-web
                  client-name: arch-web
                  # secretweb
                  client-secret: $2a$10$ueyW3xrcU4fV05A0t3lC0.KWmYYEAnQknz3A64vfBr0Rwyc/etHsW
                  client-authentication-methods: [ client_secret_post, client_secret_basic ]
                  # 一方登录提供密码模式、刷新令牌
                  authorization-grant-types: [ client_credentials, password, refresh_token]
                  scopes: [ WEB ]
              arch-app:
                token:
                  access-token-time-to-live: P1D
                registration:
                  client-id: arch-app
                  client-name: arch-app
                  # secret
                  client-secret: $2a$10$XWY/JeWE1SpNQus1mCCJqeh93jrj.hjGDHqJwKLuEEBwv/s5Xylm2
                  client-authentication-methods: [client_secret_post, client_secret_basic]
                  authorization-grant-types: [client_credentials]
                  scopes: [SERVICE]
              arch-users:
                token:
                  access-token-time-to-live: P1D
                registration:
                  client-id: arch-users
                  client-name: arch-users
                  # secretusers
                  client-secret: $2a$10$2mbgP421pk.kLvbEeyZNKOFhIewdVfg/9dSkIl34ROkfXu./xi0/O
                  client-authentication-methods: [ client_secret_post, client_secret_basic ]
                  authorization-grant-types: [ client_credentials ]
                  scopes: [ SERVICE ]
              arch-iam:
                token:
                  access-token-time-to-live: P1D
                registration:
                  client-id: ${spring.application.name}
                  client-name: ${spring.application.name}
                  # secretiam
                  client-secret: $2a$10$b7VN/WDZLSiZKmQKwVJBweiOVaJDiT52Jm35KXoVSouFEbtTg7tIe
                  client-authentication-methods: [ client_secret_post, client_secret_basic ]
                  authorization-grant-types: [ client_credentials ]
                  scopes: [ SERVICE ]
          # 客户端
          client:
            registration:
              ArchIAM:
                provider: ArchIAM
                client-id: ${spring.application.name}
                client-name: ${spring.application.name}
                authorization-grant-type: client_credentials
                client-authentication-method: client_secret_basic
                scope: [ SERVICE ]
            provider:
              ArchIAM:
                # 设置 issuer-uri，让客户端启动时像此授权中心动态获取 OAuth2 和 OIDC 周知端点 URL
                #issuer-uri: ${ISSUE_ADDR:http://localhost:9000/arch-iam}
                
                # 不使用签发地址进行解析时，手动指定如下四个周知端点 URL
                authorizationUri: ${ISSUE_ADDR:http://localhost:9000/arch-iam}/oauth2/authorize
                token-uri: ${ISSUE_ADDR:http://localhost:9000/arch-iam}/oauth2/token
                jwk-set-uri: ${ISSUE_ADDR:http://localhost:9000/arch-iam}/oauth2/jwks
                user-info-uri: ${ISSUE_ADDR:http://localhost:9000/arch-iam}/userinfo
          # 资源服务器
          resourceserver:
            jwt:
              # 使用网络获取认证服务器公钥
              #issuer-uri: ${ISSUE_ADDR:http://localhost:9000/arch-iam}
              
              # 不使用签发地址进行解析时，指定本地保存的签发服务器公钥地址
              #   优点：离线将授权服务器的公钥拷贝到本地，无需依赖网络访问
              #   缺点：授权服务器公钥变更没法自动获取
              public-key-location: classpath:arch-iam/public.pem
      cloud:
        # k8s 配置
        kubernetes:
          discovery:
            namespaces: [ "arch-namespace" ]
            catalogServicesWatchDelay: 5000
            primary-port-name: http
        # RPC 调用
        openfeign:
          client:
            default-config: default
            config:
              default:
                logger-level: basic
          # 激活 Feign 请求客户端 okhttp
          okhttp:
            enabled: true
          # 激活 Feign 追加请求头 OAuth2 令牌
          oauth2:
            enabled: true
            clientRegistrationId: ArchIAM
          # 激活 Feign 调用熔断机制（基于下方 Resilience4J 配置）
          circuitbreaker:
            enabled: true
        # 熔断配置
        circuitbreaker:
          resilience4j:
            # 开启基于信号量的隔板
            enableSemaphoreDefaultBulkhead: true
    resilience4j:
      # 熔断器
      circuitbreaker:
        configs:
          # 基于计数形式的默认熔断器
          default:
            slidingWindowSize: 100
            minimum-number-of-calls: 100
            failure-rate-threshold: 50
            slow-call-rate-threshold: 90
            slow-call-duration-threshold: PT20S
            sliding-window-type: count_based
            max-wait-duration-in-half-open-state: PT0S
            permitted-number-of-calls-in-half-open-state: 10
            wait-duration-in-open-state: PT60S
            automatic-transition-from-open-to-half-open-enabled: false
      # 时间限制器
      timelimiter:
        configs:
          default:
            timeout-duration: PT5S
            cancel-running-future: true
      # 隔板
      bulkhead:
        configs:
          default:
            max-concurrent-calls: 25
            max-wait-duration: PT0S
    # 日志配置
    logging:
      pattern:
        console: "%clr(%d{HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(-){faint} %clr([%t]){faint} %clr(%-40logger{39}){cyan}[%line]%clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:%wEx}"
      level:
        org.springframework.security: info
        io.github.reionchan.rpc.feign: debug
    
    # API 文档
    springdoc:
      version: "@project.version@"
      api-docs:
        version: openapi_3_1
      # OAuth2 认证服务器开启端口显示
      show-oauth2-endpoints: true
      swagger-ui:
        display-request-duration: true
        groups-order: DESC
        operationsSorter: method
        disable-swagger-default-url: true
        use-root-path: true
        oauth:
          client-id: arch-web
          client-secret: secretweb
      oAuthFlow:
        authorizationUrl: ${ISSUE_ADDR:http://localhost:9000/arch-iam}/oauth2/authorize
        tokenUrl: ${ISSUE_ADDR:http://localhost:9000/arch-iam}/oauth2/token
      show-actuator: false
      cache:
        disabled: true
    
    # 展示指标端点
    management:
      endpoints:
        web:
          exposure:
            include: health,refresh,circuitbreakers
      endpoint:
        health:
          probes:
            enabled: true
        refresh:
          enabled: true
      health:
        livenessstate:
          enabled: true
        readinessstate:
          enabled: true

  arch-iam-dev.yml: |-
    logging:
      level:
        org.springframework.security: info
        io.github.reionchan.rpc.feign: debug

---

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: arch-iam-deployment
  name: arch-iam-deployment
  namespace: arch-namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: arch-iam
  strategy: {}
  template:
    metadata:
      labels:
        app: arch-iam
    spec:
      serviceAccountName: arch-admin
      containers:
        - image: docker.io/reion78/arch-iam:1.0_k8s
          name: arch-iam
          ports:
            - containerPort: 9090
              name: http
          readinessProbe:
            httpGet:
              port: 9090
              path: /actuator/health/readiness
            initialDelaySeconds: 60
            timeoutSeconds: 30
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 3
          livenessProbe:
            httpGet:
              port: 9090
              path: /actuator/health/liveness
            initialDelaySeconds: 90
            timeoutSeconds: 30
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 3
          # 优雅停机
          lifecycle:
            preStop:
              exec:
                command: [ "sh", "-c", "sleep 10" ]
          env:
            - name: OTEL_SERVICE_NAME
              value: arch-iam
            - name: spring.security.oauth2.client.registration.ArchIAM.client-secret
              valueFrom:
                secretKeyRef:
                  name: arch-iam
                  key: OAUTH2_CLIENT_SECRET
          envFrom:
            - configMapRef:
                name: arch-app-common-env-configmap

---

apiVersion: v1
kind: Service
metadata:
  name: arch-iam
  namespace: arch-namespace
  labels:
    app: arch-iam
    primary-port-name: http
spec:
  ports:
    - port: 9090
      name: http
      targetPort: 9090
  selector:
    app: arch-iam
  type: ClusterIP
  sessionAffinity: None

---

apiVersion: v1
kind: Secret
metadata:
  name: arch-users
  namespace: arch-namespace
  labels:
    spring.cloud.kubernetes.secret: "true"
  annotations:
    spring.cloud.kubernetes.configmap.apps: "arch-users"
data:
  OAUTH2_CLIENT_SECRET: c2VjcmV0dXNlcnM=

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: arch-users
  namespace: arch-namespace
  labels:
    spring.cloud.kubernetes.config: "true"
  annotations:
    spring.cloud.kubernetes.configmap.apps: "arch-users"
data:
  arch-users-kubernetes.yml: |-
    server:
      port: 8081
      shutdown: graceful
    spring:
      jackson:
        # 日期格式
        date-format: yyyy-MM-dd HH:mm:ss
        # 时区
        time-zone: GMT+8
        # 忽略 null 的属性值
        default-property-inclusion: NON_NULL
      # 缓存配置
      cache:
        # 启用自动化装配的 caffeine 本地缓存
        type: caffeine
        caffeine:
          # 默认容量为 128 最大 10000 且缓存过期时间 30s 的本地缓存
          spec: initialCapacity=128,maximumSize=10000,expireAfterWrite=30s
      # 调度器线程池
      task:
        scheduling:
          thread-name-prefix: "arch-scheduling-"
          pool:
            size: 3
      # 数据源配置
      datasource:
        # 使用 hikari 连接池的数据源配置
        hikari:
          jdbc-url: jdbc:h2:mem:test
          username: sa
          password: sa
          driver-class-name: org.h2.Driver
      # 设置使用内嵌数据库时，执行表结构创建及数据插入
      sql:
        init:
          # 指定使用嵌入式数据库时，才执行 DDL DML
          mode: EMBEDDED
          # 指定 DDL 路径
          schemaLocations: classpath:/META-INF/sql/schema.sql
          # 指定 DML 路径
          dataLocations: classpath:/META-INF/sql/data.sql
      
      # 打开 H2 数据库网页版管理页面，登录地址 localhost:8081/h2
      # 注意：需要将此配置的路径从 Security 权限验证中排除
      h2:
        console:
          enabled: true
          path: /h2
          settings:
            # 是否允许其他主机访问
            webAllowOthers: false
            # 密码如设置需 128 位
            #web-admin-password: admin  
      # JPA 设置
      jpa:
        # 设置数据平台方言
        database-platform: org.hibernate.dialect.H2Dialect
        show-sql: true
        hibernate:
          ddl-auto: none
      security:
        oauth2:
          # 客户端
          client:
            registration:
              ArchIAM:
                provider: ArchIAM
                client-id: ${spring.application.name}
                client-name: ${spring.application.name}
                authorization-grant-type: client_credentials
                client-authentication-method: client_secret_basic
                scope: [ SERVICE ]
            provider:
              ArchIAM:
                # 设置 issuer-uri，让客户端启动时像此授权中心动态获取 OAuth2 和 OIDC 周知端点 URL
                #issuer-uri: ${ISSUE_ADDR:http://localhost:9000/arch-iam}
                
                # 不使用签发地址进行解析时，手动指定如下四个周知端点 URL
                authorizationUri: ${ISSUE_ADDR:http://localhost:9000/arch-iam}/oauth2/authorize
                token-uri: ${ISSUE_ADDR:http://localhost:9000/arch-iam}/oauth2/token
                jwk-set-uri: ${ISSUE_ADDR:http://localhost:9000/arch-iam}/oauth2/jwks
                user-info-uri: ${ISSUE_ADDR:http://localhost:9000/arch-iam}/userinfo
          # 资源服务器
          resourceserver:
            jwt:
              # 使用网络获取认证服务器公钥
              #issuer-uri: ${ISSUE_ADDR:http://localhost:9000/arch-iam}
              
              # 不使用签发地址进行解析时，指定本地保存的签发服务器公钥地址
              #   优点：离线将授权服务器的公钥拷贝到本地，无需依赖网络访问
              #   缺点：授权服务器公钥变更没法自动获取
              public-key-location: classpath:arch-iam/public.pem
      cloud:
        # k8s 配置
        kubernetes:
          discovery:
            namespaces: [ "arch-namespace" ]
            catalogServicesWatchDelay: 5000
            primary-port-name: http
        # RPC 调用
        openfeign:
          client:
            default-config: default
            config:
              default:
                logger-level: basic
          # 激活 Feign 请求客户端 okhttp
          okhttp:
            enabled: true
          # 激活 Feign 追加请求头 OAuth2 令牌
          oauth2:
            enabled: true
            clientRegistrationId: ArchIAM
          # 激活 Feign 调用熔断机制（基于下方 Resilience4J 配置）
          circuitbreaker:
            enabled: true
        # 熔断配置
        circuitbreaker:
          resilience4j:
            # 开启基于信号量的隔板
            enableSemaphoreDefaultBulkhead: true
    resilience4j:
      # 熔断器
      circuitbreaker:
        configs:
          # 基于计数形式的默认熔断器
          default:
            slidingWindowSize: 10
            minimum-number-of-calls: 10
            failure-rate-threshold: 50
            slow-call-rate-threshold: 90
            slow-call-duration-threshold: PT20S
            sliding-window-type: count_based
            max-wait-duration-in-half-open-state: PT0S
            permitted-number-of-calls-in-half-open-state: 4
            wait-duration-in-open-state: PT60S
            automatic-transition-from-open-to-half-open-enabled: false
      # 时间限制器
      timelimiter:
        configs:
          default:
            timeout-duration: PT5S
            cancel-running-future: true
      # 隔板
      bulkhead:
        configs:
          default:
            max-concurrent-calls: 25
            max-wait-duration: PT0S
    # 日志配置
    logging:
      pattern:
        console: "%clr(%d{HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(-){faint} %clr([%t]){faint} %clr(%-40logger{39}){cyan}[%line]%clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:%wEx}"
      level:
        org.springframework.security: info
        io.github.reionchan.rpc.feign: debug
    
    # API 文档
    springdoc:
      version: "@project.version@"
      api-docs:
        version: openapi_3_1
      swagger-ui:
        display-request-duration: true
        groups-order: DESC
        operationsSorter: method
        disable-swagger-default-url: true
        use-root-path: true
        oauth:
          client-id: arch-web
          client-secret: secretweb
      oAuthFlow:
        authorizationUrl: ${ISSUE_ADDR:http://localhost:9000/arch-iam}/oauth2/authorize
        tokenUrl: ${ISSUE_ADDR:http://localhost:9000/arch-iam}/oauth2/token
      show-actuator: false
      cache:
        disabled: true
    
    # 展示指标端点
    management:
      endpoints:
        web:
          exposure:
            include: health,refresh,circuitbreakers
      endpoint:
        health:
          probes:
            enabled: true
        refresh:
          enabled: true
      health:
        livenessstate:
          enabled: true
        readinessstate:
          enabled: true

  arch-users-dev.yml: |-
    logging:
      level:
        org.springframework.security: info
        io.github.reionchan.rpc.feign: debug

---

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: arch-users-deployment
  name: arch-users-deployment
  namespace: arch-namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: arch-users
  strategy: {}
  template:
    metadata:
      labels:
        app: arch-users
    spec:
      serviceAccountName: arch-admin
      containers:
        - image: docker.io/reion78/arch-users:1.0_k8s
          name: arch-users
          ports:
            - containerPort: 8081
              name: http
          readinessProbe:
            httpGet:
              port: 8081
              path: /actuator/health/readiness
            initialDelaySeconds: 60
            timeoutSeconds: 30
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 3
          livenessProbe:
            httpGet:
              port: 8081
              path: /actuator/health/liveness
            initialDelaySeconds: 90
            timeoutSeconds: 30
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 3
          # 优雅停机
          lifecycle:
            preStop:
              exec:
                command: [ "sh", "-c", "sleep 10" ]
          env:
            - name: OTEL_SERVICE_NAME
              value: arch-users
            - name: spring.security.oauth2.client.registration.ArchIAM.client-secret
              valueFrom:
                secretKeyRef:
                  name: arch-users
                  key: OAUTH2_CLIENT_SECRET
          envFrom:
            - configMapRef:
                name: arch-app-common-env-configmap

---

apiVersion: v1
kind: Service
metadata:
  name: arch-users
  namespace: arch-namespace
  labels:
    app: arch-users
    primary-port-name: http
spec:
  ports:
    - port: 8081
      name: http
      targetPort: 8081
  selector:
    app: arch-users
  type: ClusterIP
  sessionAffinity: None

---

apiVersion: v1
kind: Secret
metadata:
  name: arch-app
  namespace: arch-namespace
  labels:
    spring.cloud.kubernetes.secret: "true"
  annotations:
    spring.cloud.kubernetes.configmap.apps: "arch-app"
data:
  OAUTH2_CLIENT_SECRET: c2VjcmV0

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: arch-app
  namespace: arch-namespace
  labels:
    spring.cloud.kubernetes.config: "true"
  annotations:
    spring.cloud.kubernetes.configmap.apps: "arch-app"
data:
  arch-app-kubernetes.yml: |-
    server:
      port: 8080
      shutdown: graceful
    spring:
      jackson:
        # 日期格式
        date-format: yyyy-MM-dd HH:mm:ss
        # 时区
        time-zone: GMT+8
        # 忽略 null 的属性值
        default-property-inclusion: NON_NULL
      # 缓存配置
      cache:
        # 启用自动化装配的 caffeine 本地缓存
        type: caffeine
        caffeine:
          # 默认容量为 128 最大 10000 且缓存过期时间 30s 的本地缓存
          spec: initialCapacity=128,maximumSize=10000,expireAfterWrite=30s
      # 调度器线程池
      task:
        scheduling:
          thread-name-prefix: "arch-scheduling-"
          pool:
            size: 3
      security:
        oauth2:
          # 客户端
          client:
            registration:
              ArchIAM:
                provider: ArchIAM
                client-id: ${spring.application.name}
                client-name: ${spring.application.name}
                authorization-grant-type: client_credentials
                client-authentication-method: client_secret_basic
                scope: [ SERVICE ]
            provider:
              ArchIAM:
                # 设置 issuer-uri，让客户端启动时像此授权中心动态获取 OAuth2 和 OIDC 周知端点 URL
                #issuer-uri: ${ISSUE_ADDR:http://localhost:9000/arch-iam}
                
                # 不使用签发地址进行解析时，手动指定如下四个周知端点 URL
                authorizationUri: ${ISSUE_ADDR:http://localhost:9000/arch-iam}/oauth2/authorize
                token-uri: ${ISSUE_ADDR:http://localhost:9000/arch-iam}/oauth2/token
                jwk-set-uri: ${ISSUE_ADDR:http://localhost:9000/arch-iam}/oauth2/jwks
                user-info-uri: ${ISSUE_ADDR:http://localhost:9000/arch-iam}/userinfo
          # 资源服务器
          resourceserver:
            jwt:
              # 使用网络获取认证服务器公钥
              #issuer-uri: ${ISSUE_ADDR:http://localhost:9000/arch-iam}
              
              # 不使用签发地址进行解析时，指定本地保存的签发服务器公钥地址
              #   优点：离线将授权服务器的公钥拷贝到本地，无需依赖网络访问
              #   缺点：授权服务器公钥变更没法自动获取
              public-key-location: classpath:arch-iam/public.pem
      cloud:
        # k8s 配置
        kubernetes:
          discovery:
            namespaces: [ "arch-namespace" ]
            catalogServicesWatchDelay: 5000
            primary-port-name: http
        # RPC 调用
        openfeign:
          client:
            default-config: default
            config:
              default:
                logger-level: basic
          # 激活 Feign 请求客户端 okhttp
          okhttp:
            enabled: true
          # 激活 Feign 追加请求头 OAuth2 令牌
          oauth2:
            enabled: true
            clientRegistrationId: ArchIAM
          # 激活 Feign 调用熔断机制（基于下方 Resilience4J 配置）
          circuitbreaker:
            enabled: true
        # 熔断配置
        circuitbreaker:
          resilience4j:
            # 开启基于信号量的隔板
            enableSemaphoreDefaultBulkhead: true
    
    resilience4j:
      # 熔断器
      circuitbreaker:
        configs:
          # 基于计数形式的默认熔断器
          default:
            slidingWindowSize: 10
            minimum-number-of-calls: 10
            failure-rate-threshold: 50
            slow-call-rate-threshold: 90
            slow-call-duration-threshold: PT20S
            sliding-window-type: count_based
            max-wait-duration-in-half-open-state: PT0S
            permitted-number-of-calls-in-half-open-state: 4
            wait-duration-in-open-state: PT60S
            automatic-transition-from-open-to-half-open-enabled: false
      # 时间限制器
      timelimiter:
        configs:
          default:
            timeout-duration: PT5S
            cancel-running-future: true
      # 隔板
      bulkhead:
        configs:
          default:
            max-concurrent-calls: 25
            max-wait-duration: PT0S
    
    # 日志配置
    logging:
      pattern:
        console: "%clr(%d{HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(-){faint} %clr([%t]){faint} %clr(%-40logger{39}){cyan}[%line]%clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:%wEx}"
      level:
        org.springframework.security: info
        io.github.reionchan.rpc.feign: debug
    
    # API 文档
    springdoc:
      version: "@project.version@"
      api-docs:
        version: openapi_3_1
      swagger-ui:
        display-request-duration: true
        groups-order: DESC
        operationsSorter: method
        disable-swagger-default-url: true
        use-root-path: true
        oauth:
          client-id: arch-web
          client-secret: secretweb
      oAuthFlow:
        authorizationUrl: ${ISSUE_ADDR:http://localhost:9000/arch-iam}/oauth2/authorize
        tokenUrl: ${ISSUE_ADDR:http://localhost:9000/arch-iam}/oauth2/token
      show-actuator: false
      cache:
        disabled: true
    
    # 展示指标端点
    management:
      endpoints:
        web:
          exposure:
            include: health,refresh,circuitbreakers
      endpoint:
        health:
          probes:
            enabled: true
        refresh:
          enabled: true
      health:
        livenessstate:
          enabled: true
        readinessstate:
          enabled: true
  arch-app-dev.yml: |-
    logging:
      level:
        org.springframework.security: info
        io.github.reionchan.rpc.feign: debug

---

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: arch-app-deployment
  name: arch-app-deployment
  namespace: arch-namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: arch-app
  strategy: {}
  template:
    metadata:
      labels:
        app: arch-app
    spec:
      serviceAccountName: arch-admin
      containers:
        - image: docker.io/reion78/arch-app:1.0_k8s
          name: arch-app
          ports:
            - containerPort: 8080
              name: http
          # 保活探针
          readinessProbe:
            httpGet:
              port: 8080
              path: /actuator/health/readiness
            initialDelaySeconds: 60
            timeoutSeconds: 30
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 3
          livenessProbe:
            httpGet:
              port: 8080
              path: /actuator/health/liveness
            initialDelaySeconds: 90
            timeoutSeconds: 30
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 3
          # 优雅停机
          lifecycle:
            preStop:
              exec:
                command: ["sh", "-c", "sleep 10"]
          env:
            - name: OTEL_SERVICE_NAME
              value: arch-app
            - name: spring.security.oauth2.client.registration.ArchIAM.client-secret
              valueFrom:
                secretKeyRef:
                  name: arch-app
                  key: OAUTH2_CLIENT_SECRET
          envFrom:
            - configMapRef:
                name: arch-app-common-env-configmap

---

apiVersion: v1
kind: Service
metadata:
  name: arch-app
  namespace: arch-namespace
  labels:
    app: arch-app
    primary-port-name: http
spec:
  ports:
    - port: 8080
      name: http
      targetPort: 8080
  selector:
    app: arch-app
  type: ClusterIP
  sessionAffinity: None

